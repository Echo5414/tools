description: General Cursor Rules
globs:
alwaysApply: true
---

# Project Instructions

- Follow the specifications and guidelines carefully as you build the app.
- Write complete code for each step — no shortcuts or skipping.
- Your goal is to fully complete every task I request.
- Avoid modifying code that isn’t directly related to what I’ve asked for.

## Code Style
- Use consistent indentation (2 spaces).
- Keep line length under 100 characters.
- Use meaningful variable and function names.
- Follow single responsibility principle.
- Comment complex logic, not obvious code.
- Use kebab case for all files and folders unless otherwise specified.
- Leverage linters (ESLint, Prettier) for consistent formatting and style.

## Functions
- Keep functions small and focused on a single task.
- Avoid side effects when possible.
- Use pure functions where appropriate.
- Limit parameter count (≤3 ideally).
- Consider using functional programming patterns when beneficial.

## Variables
- Use `const` by default, `let` when necessary.
- Avoid global variables.
- Initialize variables close to their usage.
- Use descriptive, intention-revealing names.

## Error Handling
- Always catch and handle exceptions appropriately.
- Provide meaningful error messages.
- Fail fast and explicitly.
- Don’t swallow errors silently.
- Log errors for visibility and debugging.

## System Architecture & Design
- **Modularity**: Create self-contained components with clear responsibilities.
- **Encapsulation**: Hide implementation details behind well-defined interfaces.
- **Scalability**: Design systems that can grow without requiring complete refactoring.
- **Flexibility**: Allow for extension without modification (Open/Closed Principle).
- **Resource Management**: Consider memory, CPU, and storage constraints.
- **State Management**: Define clear state transitions and avoid global state.
- **Dependency Management**: Use dependency injection and inversion of control.

## SOLID Principles
- **Single Responsibility**: Each class/module should have one reason to change.
- **Open/Closed**: Open for extension, closed for modification.
- **Liskov Substitution**: Subtypes must be substitutable for their base types.
- **Interface Segregation**: Many specific interfaces are better than one general interface.
- **Dependency Inversion**: Depend on abstractions, not concretions.

## Performance
- Optimize after functionality is complete.
- Profile before optimizing.
- Cache expensive operations.
- Minimize DOM manipulations.
- Consider time and space complexity.
- Use modern profiling tools for deeper analysis.

## Security
- Validate all input data.
- Sanitize output to prevent XSS.
- Use parameterized queries to prevent SQL injection.
- Follow least privilege principle.
- Implement proper authentication and authorization.
- Keep dependencies updated with security patches.

## Version Control
- Make atomic commits.
- Write descriptive commit messages.
- Use branches for features and fixes.
- Review code before merging.
- Tag releases and maintain changelogs for clarity.

## Documentation
- Document public APIs.
- Include examples in documentation.
- Keep documentation up-to-date.
- Document architectural decisions.
- Use diagrams for complex systems.
- Encourage team-wide knowledge sharing with wikis or internal docs.

## Memory Management
- Use appropriate data structures.
- Consider object lifecycles.
- Use smart pointers when available (in C++, Rust).
- Release resources in reverse order of acquisition.
- Avoid memory leaks and dangling pointers.

## Serialization & Data Exchange
- Choose appropriate serialization formats (JSON, Protocol Buffers, etc.).
- Consider serialization performance vs. human readability.
- Validate deserialized data.
- Version your data formats.
- Implement error handling for deserialization failures.

## Env Rules
- If you update environment variables, update the `.env.example` file.
- All environment variables should go in `.env.development` and `.env.production`.
- Do not expose environment variables to the frontend.
- Use `SVELTE_PUBLIC_` prefix for environment variables that need to be accessed from the frontend.
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`.

## References
- lean Code by Robert C. Martin: https://www.oreilly.com/library/view/clean-code/9780136083238
- Twelve-Factor App: https://12factor.net